pipeline {
    agent any

    environment {
        MAVEN_OPTS = '-Dmaven.test.failure.ignore=false'
        INVENTORY_PATH = "/mnt/c/Microservices/VehicleService/vehiclemanagement/inventory.ini"
        PLAYBOOK_PATH = "/mnt/c/Microservices/VehicleService/vehiclemanagement/deploy.yml"
        DOCKERHUB_CREDENTIALS = credentials('pmoxhamdockerhub')
    }

    stages {
        stage('Checkout') {
            steps {
                git branch: 'main', url: 'https://github.com/moxham0110/VehicleService.git'
            }
        }

        stage('Build') {
            steps {
                dir('vehiclemanagement') {
                    echo 'Building the project...'
                    bat "mvn clean compile"
                }
            }
        }

        stage('Unit & Integration & Karate Tests') {
            steps {
                dir('vehiclemanagement') {
                    echo 'Running unit & integration & karate tests...'
                    bat "mvn test"
                    junit 'target/surefire-reports/*.xml'
                    bat "mvn test -Dtest=KarateSpringBootTestIT"
                    archiveArtifacts artifacts: 'target/karate-reports/karate-summary.html', allowEmptyArchive: true
                    publishHTML([
                        reportDir: 'target/karate-reports',
                        reportFiles: 'karate-summary.html',
                        reportName: 'Karate Test Report',
                        allowMissing: false,
                        alwaysLinkToLastBuild: true,
                        keepAll: true
                    ])

                }
            }
        }

        stage('Code Coverage') {
            steps {
                dir('vehiclemanagement') {
                    echo 'Generating JaCoCo report...'
                    bat "mvn jacoco:report"
                }
            }
        }

        stage('SonarQube Analysis') {
            steps {
                dir('vehiclemanagement') {
                    withSonarQubeEnv('sonarqube') {
                        bat """
                        mvn sonar:sonar ^
                            -Dsonar.projectKey=VehicleManagement ^
                            -Dsonar.projectName=VehicleManagement ^
                            -Dsonar.projectVersion=1.0 ^
                            -Dsonar.projectBaseDir=vehiclemanagement ^
                            -Dsonar.sources=src/main/java ^
                            -Dsonar.tests=src/test/java ^
                            -Dsonar.coverage.jacoco.xmlReportPaths=target/site/jacoco/jacoco.xml ^
                            -Dsonar.language=java ^
                            -Dsonar.sourceEncoding=UTF-8 ^
                            -Dsonar.host.url=http://localhost:9000 ^
                            -Dsonar.scm.disabled=true ^
                            -Dsonar.java.binaries=target/classes ^
                            -Dsonar.token=sqa_60b0aeb96bc107be6ee2c8765ad03ed827c19cf9
                        """
                    }
                }
            }
        }

        stage('OWASP Security Scan ') {
           steps {
               dir('vehiclemanagement') {
                   echo 'Running OWASP Dependency-Check...'
                   bat "mvn org.owasp:dependency-check-maven:check"
                   archiveArtifacts artifacts: 'target/dependency-check-report.html', allowEmptyArchive: true
                   publishHTML([
                       reportDir: 'target',
                       reportFiles: 'dependency-check-report.html',
                       reportName: 'OWASP Dependency Check Report',
                       allowMissing: false,
                       alwaysLinkToLastBuild: true,
                       keepAll: true
                   ])
               }
           }
        }

        stage('Maven Package') {
            steps {
                dir('vehiclemanagement') {
                    echo 'Packaging the application...'
                    bat "mvn package"
                }
            }
        }

        stage('Docker Login, Build Image, Tag Image, Push Image') {
                    steps {
                        dir('vehiclemanagement') {
                            bat """
                                docker login -u %DOCKERHUB_CREDENTIALS_USR% -p %DOCKERHUB_CREDENTIALS_PSW%
                                docker build -t vehicle-service:latest .
                                docker tag vehicle-service:latest pmoxham/vehicle-service:latest
                                docker push pmoxham/vehicle-service:latest
                            """

                        }
                    }
                }

        stage('Deploy to EC2 via Ansible') {
             steps {
                   dir('vehiclemanagement') {
                        script {
                            bat 'wsl ansible-playbook -i inventory.ini deploy.yml'
                        }
                   }
             }
        }
    }

    post {
        always {
            echo 'Pipeline finished.'
        }
        failure {
            echo 'Build failed.'
        }
    }
}



